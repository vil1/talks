< \r███████\m╗\r██\m╗  \r██\m╗ \r█████\m╗ \r██████\m╗ \r███████\m╗\r██\m╗     \r███████\m╗\r███████\m╗\r███████\m╗    \r██████\m╗
< \r██\m╔════╝\r██\m║  \r██\m║\r██\m╔══\r██\m╗\r██\m╔══\r██\m╗\r██\m╔════╝\r██\m║     \r██\m╔════╝\r██\m╔════╝\r██\m╔════╝    ╚════\r██\m╗
< \r███████\m╗\r███████\m║\r███████\m║\r██████\m╔╝\r█████\m╗  \r██\m║     \r█████\m╗  \r███████\m╗\r███████\m╗      ▄\r███\m╔╝
< \m╚════\r██\m║\r██\m╔══\r██\m║\r██\m╔══\r██\m║\r██\m╔═══╝ \r██\m╔══╝  \r██\m║     \r██\m╔══╝  ╚════\r██\m║╚════\r██\m║      ▀▀══╝
< \r███████\m║\r██\m║  \r██\m║\r██\m║  \r██\m║\r██\m║     \r███████\m╗\r███████\m╗\r███████\m╗\r███████\m║\r███████\m║      \r██\m╗
< \m╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝      ╚═╝

<                                         \r███████\m╗ \r█████\m╗ \r███████\m╗\r██\m╗   \r██\m╗    \r██\m╗
<                                         \r██\m╔════╝\r██\m╔══\r██\m╗\r██\m╔════╝╚\r██\m╗ \r██\m╔╝    \r██\m║
<                                         \r█████\m╗  \r███████\m║\r███████\m╗ ╚\r████\m╔╝     \r██\m║
<                                         \r██\m╔══╝  \r██\m╔══\r██\m║╚════\r██\m║  ╚\r██\m╔╝      ╚═╝
<                                         \r███████\m╗\r██\m║  \r██\m║\r███████\m║   \r██\m║       \r██\m╗
<                                         \m╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝       ╚═╝

| Scalar conference - Warsaw - 2016/4/16

> \g@ValentinKasas \_\chttp://kanaka.io
---
| Who am I ?

* Freelance developer from \r█\w█\b█\s
* Using Scala since mid 2012
* (\_Extremely\s) modest Shapeless contributor (\g131\s loc)
---
| What is Shapeless ?

* A library for generic programming in Scala
* Started as an experiment back in 2011
* Now has \b67\s contributors and \g44k\s loc
---
| Generic programming

* Programming with types not known beforehand
* Goes beyond classical polymorphism

            ╔═ \gGeneric program\s ╗
            ║                  ║
            ║                  v
* \bType\s ══> \gGeneric representation\s ══> \bType\s
---
| Heterogeneous Lists

--
* A "List" containing elements of different types
--
* Retains the type of each element in its own type

--
```
sealed trait HList
case object HNil extends HList
case class ::[H, T <: HList](head: H, tail: T) extends HList
```
---
| HList examples

```
val intStringLong = 42 :: "Scalar" :: 1L :: HNil

type LSB = Long :: String :: Boolean :: HNil

val lsb: LSB = 1L :: "foo" :: false :: HNil

// this wouldn't compile
// val lsb2: LSB = intStringLong
```
---
| Manipulating HLists
--

* The HList trait defines no method
--
* Every operation is injected through typeclasses
---
| Counting the elements of a HList
--

```
case class Size[L <: HList](get: Int)
```
--
```

object Size {

```
--
```
  implicit val hnilSize = Size[HNil](0)

```
--
```
  implicit def hconsSize[H, T <: HList](implicit tailSize: Size[T]) =
    Size[H :: T](1 + tailSize.get)
```
--
```

  def apply[L <: HList](l: L)(implicit size: Size[L]): Int = size.get

}
```
---
| How does that work ?
--

< Calling

```
    Size("foo" :: true :: HNil)
```
--

< Requires an implicit

```
    Size[String :: Boolean :: HNil]
```
--

< It can be obtained by calling

```
    hconsSize[String, Boolean :: HNil]
```
--

< Which requires an implicit

```
    Size[Boolean :: HNil]
```
--

< Obtained via

```
    hconsSize[Boolean, HNil]
```
--

< Which needs an implicit

```
    Size[HNil]
```
--

< Which is the type of

```
    hnilSize
```
--

< So in the end we have

```
    Size("foo" :: true :: HNil) = hconsSize[String, Boolean :: HNil](
                                    hconsSize[Boolean, HNil](
                                      hnilSize))

                                = Size[String :: Boolean :: HNil](1 +
                                    Size[Boolean :: HNil](1 +
                                      Size[HNil](0).get).get)
```
---
| Manipulating HList (cont'd)

* Decompose the HList recursively

* Use implicit resolution to derive the whole traversal

---
| Ok, that's all fun and games, but it's pretty \ruseless\s so far
---
| Generic : making things useful
--

* We need a way to transform our classes to their generic representation
--

* \bGeneric\s does that for us

--
```
case class Person(name: String, age: Int)

val genPerson = Generic[Person]

val homer = Person("Homer Simpson", 42)

val repr = genPerson.to(homer)

val ned = genPerson.from("Ned Flanders" :: 42 :: HNil)
```
---
| Real life use case : computing deltas

* Imagine we want to be able to determine what are the difference between two objects of the same type

* For example, we need to know what have changed in our DB since the last backup

* We need to be able to compute such deltas over a wide variety of classes, that are unrelated

* Of course, doing this by hand for each and every class is not an option
---
| Our diff representation


```
sealed trait Diff[A]

final case class Identical[A](value: A) extends Diff[A]

final case class Different[A](left: A, right: A) extends Diff[A]

object Diff {
  def apply[A](left: A, right: A): Diff[A] =
    if (left == right) Identical(left)
    else               Different(left, right)
}
```
---
| A first Delta implementation

```
trait SimpleDelta[R <: HList] extends DepFn2[R, R] {
  type Out <: HList
}
--

object SimpleDelta {

  type Aux[I <: HList, O <: HList] = SimpleDelta[I]{ type Out = O }
--

  implicit def hnilDelta: Aux[HNil, HNil] = ???

--
  implicit def hconsDelta[H, T <: HList, DT <: HList]
    (implicit tailDelta: Aux[T, DT])
    : Aux[H::T, Diff[H] :: DT] = ???

}
```
---
| A first Delta implementation

```
trait SimpleDelta[R <: HList] extends DepFn2[R, R] {
  type Out <: HList
}

object SimpleDelta {

  type Aux[I <: HList, O <: HList] = SimpleDelta[I]{ type Out = O }

  implicit def hnilDelta: Aux[HNil, HNil] = new SimpleDelta[HNil] {

    type Out = HNil

    def apply(l: HNil, r: HNil): Out = HNil

  }

  implicit def hconsDelta[H, T <: HList, DT <: HList]
    (implicit tailDelta: Aux[T, DT])
    : Aux[H::T, Diff[H] :: DT] = ???

}
```
---
| A first Delta implementation

```
trait SimpleDelta[R <: HList] extends DepFn2[R, R] {
  type Out <: HList
}

object SimpleDelta {

  type Aux[I <: HList, O <: HList] = SimpleDelta[I]{ type Out = O }

  implicit def hnilDelta: Aux[HNil, HNil] = new SimpleDelta[HNil] {

    type Out = HNil

    def apply(l: HNil, r: HNil): Out = HNil

  }

  implicit def hconsDelta[H, T <: HList, DT <: HList]
    (implicit tailDelta: Aux[T, DT])
    : Aux[H::T, Diff[H] :: DT] = new SimpleDelta[H :: T]{

    type Out = Diff[H] :: DT

    def apply(l: H :: T, r: H :: T) : Out =
      Diff(l.head, r.head) :: tailDelta(l.tail, r.tail)
  }

}
```
---
| A first Delta implementation

```
trait SimpleDelta[R <: HList] extends DepFn2[R, R] {
  type Out <: HList
}

object SimpleDelta {

  type Aux[I <: HList, O <: HList] = SimpleDelta[I]{ type Out = O }

  implicit def hnilDelta: Aux[HNil, HNil] = new SimpleDelta[HNil] {

    type Out = HNil

    def apply(l: HNil, r: HNil): Out = HNil

  }

  implicit def hconsDelta[H, T <: HList, DT <: HList]
    (implicit tailDelta: Aux[T, DT])
    : Aux[H::T, Diff[H] :: DT] = new SimpleDelta[H :: T]{

    type Out = Diff[H] :: DT

    def apply(l: H :: T, r: H :: T) : Out =
      Diff(l.head, r.head) :: tailDelta(l.tail, r.tail)
  }

  def apply[A, R <: HList](l: A, r: A)
    (implicit genA: Generic.Aux[A, R],
              delta: SimpleDelta[R])
    : delta.Out =
      delta(genA.to(l), genA.to(r))
}
```
---
| Lets try it out

```
case class Address(number: Int, street: String, city: String)

case class Character(name: String, age: Int, address: Address)

val homer = Character("Homer Simpson", 42, Address(742, "Evergreen Terrace", "Springfield"))

val ned = Character("Ned Flanders", 42, Address(744, "Evergreen Terrace", "Springfield"))
```
---
| Going further

* That's quite nice, but still a bit coarse-grained

* SimpleDelta doesn't work on nested fields
---
```
trait Delta[R <: HList] extends DepFn2[R, R]{
  type Out <: HList
}

object Delta {

  type Aux[R <: HList, O <: HList] = Delta[R]{type Out = O}

  implicit def hnilDelta: Aux[HNil, HNil] = new Delta[HNil] {
    override type Out = HNil

    override def apply(l: HNil, r: HNil): Out = HNil
  }

  implicit def hconsGenDelta[H, GH <: HList, DH <: HList,  T <: HList, DT <: HList]
    (implicit genH: Generic.Aux[H, GH],
              nested: Delta.Aux[GH, DH],
              tailDelta: Delta.Aux[T, DT])
    : Aux[H :: T, DH :: DT] = new Delta[H :: T] {
      override type Out = DH :: DT

      override def apply(l: H :: T, r: H :: T): Out =
        nested(genH.to(l.head), genH.to(r.head)) :: tailDelta(l.tail, r.tail)
    }
}
```
---
```
trait Delta[R <: HList] extends DepFn2[R, R]{
  type Out <: HList
}

object Delta extends LowPriorityDelta {

  type Aux[R <: HList, O <: HList] = Delta[R]{type Out = O}

  implicit def hnilDelta: Aux[HNil, HNil] = new Delta[HNil] {
    override type Out = HNil

    override def apply(l: HNil, r: HNil): Out = HNil
  }

  implicit def hconsGenDelta[H, GH <: HList, DH <: HList,  T <: HList, DT <: HList]
    (implicit genH: Generic.Aux[H, GH],
              nested: Delta.Aux[GH, DH],
              tailDelta: Delta.Aux[T, DT])
    : Aux[H :: T, DH :: DT] = new Delta[H :: T] {
      override type Out = DH :: DT

      override def apply(l: H :: T, r: H :: T): Out =
        nested(genH.to(l.head), genH.to(r.head)) :: tailDelta(l.tail, r.tail)
    }
}

trait LowPriorityDelta {
  implicit def hconsDelta[H, T <: HList, DT <: HList]
    (implicit tailDelta: Delta.Aux[T, DT])
    : Delta.Aux[H :: T, Diff[H] :: DT] = new Delta[H :: T] {
      override type Out = Diff[H] :: DT

      override def apply(l: H :: T, r: H :: T): Out =
        Diff(l.head, r.head) :: tailDelta(l.tail, r.tail)
    }
}

```
---
```
trait Delta[R <: HList] extends DepFn2[R, R]{
  type Out <: HList
}

object Delta extends LowPriorityDelta {

  type Aux[R <: HList, O <: HList] = Delta[R]{type Out = O}

  implicit def hnilDelta: Aux[HNil, HNil] = new Delta[HNil] {
    override type Out = HNil

    override def apply(l: HNil, r: HNil): Out = HNil
  }

  implicit def hconsGenDelta[H, GH <: HList, DH <: HList,  T <: HList, DT <: HList]
    (implicit genH: Generic.Aux[H, GH],
              nested: Delta.Aux[GH, DH],
              tailDelta: Delta.Aux[T, DT])
    : Aux[H :: T, DH :: DT] = new Delta[H :: T] {
      override type Out = DH :: DT

      override def apply(l: H :: T, r: H :: T): Out =
        nested(genH.to(l.head), genH.to(r.head)) :: tailDelta(l.tail, r.tail)
    }

  def apply[A, R <: HList](l: A, r: A)
    (implicit genA: Generic[A])
    (implicit delta: Delta[genA.Repr])
    : delta.Out =
      delta(genA.to(l), genA.to(r))
}

trait LowPriorityDelta {
  implicit def hconsDelta[H, T <: HList, DT <: HList]
    (implicit tailDelta: Delta.Aux[T, DT])
    : Delta.Aux[H :: T, Diff[H] :: DT] = new Delta[H :: T] {
      override type Out = Diff[H] :: DT

      override def apply(l: H :: T, r: H :: T): Out =
        Diff(l.head, r.head) :: tailDelta(l.tail, r.tail)
    }
}

```
---
| There is so much more to explore !

* Coproduct
* Singleton types
* LabelledGeneric
* Extensible records
* Poly
* Typeclass derivation
* etc ...
---
| \gThanks
---
| Bonus : Patcher
```
trait Patcher[R <: HList, P <: HList] {
  def apply(repr: R, patch: P): R
}

trait LowPriorityPatcher {

  implicit def hconsPatcher[H, T <: HList, PT <: HList]
  (implicit tailPatcher: Patcher[T, PT]): Patcher[H::T, Diff[H]::PT] = new Patcher[H::T, Diff[H]::PT] {
    override def apply(repr: H :: T, patch: Diff[H] :: PT): H :: T = {

      val head = patch.head match {
        case Identical(_) => repr.head
        case Different(_, x) => x
      }
      head :: tailPatcher(repr.tail, patch.tail)
    }
  }
}


object Patcher extends LowPriorityPatcher{

  def apply[A, R <: HList, P <: HList](value: A, patch: P)
  (implicit gen: Generic.Aux[A, R], patcher: Patcher[R, P]): A =
    gen.from(patcher(gen.to(value), patch))

  implicit def hnilPatcher: Patcher[HNil, HNil] = new Patcher[HNil, HNil] {
    override def apply(repr: HNil, patch: HNil): HNil = HNil
  }

  implicit def hconsGenPatcher[H, GH <: HList, T <: HList, PH <: HList, PT <: HList]
  (implicit genH: Generic.Aux[H, GH],
    headPatcher: Patcher[GH, PH],
    tailPatcher: Patcher[T, PT])
  : Patcher[H::T, PH::PT] =
    new Patcher[H::T, PH::PT] {
      override def apply(repr: H :: T, patch: PH :: PT): H :: T =
        genH.from(headPatcher(genH.to(repr.head), patch.head)) :: tailPatcher(repr.tail, patch.tail)
    }
}
```
